{"cells": [{"source": ["# Plots the United States\n", "\n", "It is always convenient to be able to plots states.  Let's boogie on dat.\n"], "cell_type": "markdown"}, {"source": ["%load_ext importable\n", "from toolz.curried import *; from pandas import *; import pandas as pd\n"], "cell_type": "code"}, {"source": ["## [Shape files from census.gov](https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html)\n", "\n", "## [`@aerispaha1`s gist to read shapefiles to a dataframe](https://gist.github.com/aerispaha/f098916ac041c286ae92d037ba5c37ba)\n", "\n", "Load that file in with the `%load` magic.\n"], "cell_type": "markdown"}, {"source": ["# %load https://gist.githubusercontent.com/aerispaha/f098916ac041c286ae92d037ba5c37ba/raw/bbec58b3e39ee709e5e96aa65e87e6b568ab4a84/read_shapefile.py\n", "def read_shapefile(shp_path):\n", "\t\"\"\"\n", "\tRead a shapefile into a Pandas dataframe with a 'coords' column holding\n", "\tthe geometry information. This uses the pyshp package\n", "\t\"\"\"\n", "\timport shapefile\n", "\n", "\t#read file, parse out the records and shapes\n", "\tsf = shapefile.Reader(shp_path)\n", "\tfields = [x[0] for x in sf.fields][1:]\n", "\trecords = sf.records()\n", "\tshps = [s.points for s in sf.shapes()]\n", "\n", "\t#write into a dataframe\n", "\tdf = pd.DataFrame(columns=fields, data=records)\n", "\tdf = df.assign(coords=shps)\n", "\n", "\treturn df\n"], "cell_type": "code"}, {"source": ["from sklearn import preprocessing\n", "from bokeh.plotting import *; from bokeh.models import *\n", "output_notebook(resources=__import__('bokeh').resources.CDN)\n"], "cell_type": "code"}, {"source": ["* Read the shapefile after unzipping the contents from census.gov\n"], "cell_type": "markdown"}, {"source": ["df = read_shapefile('../../../Downloads/cb_2016_us_state_500k/cb_2016_us_state_500k.shp')\n", "\n", "# nth controls the density of edge points.\n", "nth = 15\n", "\n", "df = concat([\n", "    df, concat(dict(\n", "        x=df.coords.apply(compose(list, take_nth(nth), pluck(0))),\n", "        y=df.coords.apply(compose(list, take_nth(nth), pluck(1)))\n", "    ), axis=1)], axis=1).set_index('NAME')\n", "\n", "for _ in 'xy': df[_] = df[_].apply(preprocessing.minmax_scale, args=[[-.5, .5]])\n"], "cell_type": "code"}, {"source": ["source = df[list('xy')].pipe(ColumnDataSource)\n"], "cell_type": "code"}, {"source": ["p = figure()\n", "for i in range(50):\n", "    p.patches(\n", "        dict(\n", "            field='x',\n", "            transform=CustomJSTransform(v_func=\"\"\"return xs.map(function(v, i){\n", "                return v.map(function(w){return w+%i});\n", "            });\"\"\"%i)\n", "        ),\n", "        dict(\n", "            field='y', \n", "            transform=CustomJSTransform(\n", "                v_func=\"\"\"return xs.map(function(v, i){\n", "                return v.map(function(w){return (w+i+%i) %s 50 });\n", "            });\"\"\"%(i, '%'))\n", "        ), fill_alpha=0, source=source)\n", "\n", "show(p)\n"], "cell_type": "code"}, {"source": ["p = figure()\n", "for i in range(50):\n", "    p.patches(\n", "        dict(\n", "            field='x',\n", "            transform=CustomJSTransform(v_func=\"\"\"return xs.map(function(v, i){\n", "                return v.map(function(w){return w+%i});\n", "            });\"\"\"%i)\n", "        ),\n", "        dict(\n", "            field='y', \n", "            transform=CustomJSTransform(\n", "                v_func=\"\"\"return xs.map(function(v, i){\n", "                return v.map(function(w){return (w+i+%i) %s 50 });\n", "            });\"\"\"%(i*0, '%'))\n", "        ), fill_alpha=0, source=source)\n", "\n", "show(p)\n"], "cell_type": "code"}, {"source": ["## Consider making\n"], "cell_type": "markdown"}]}